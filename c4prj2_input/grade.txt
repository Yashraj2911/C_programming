Grading at Mon Aug  3 09:35:33 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Valgrind reported errors:
==2134== Memcheck, a memory error detector
==2134== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2134== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2134== Command: ./tester h.txt d.txt
==2134== Parent PID: 2133
==2134== 
==2134== Invalid read of size 8
==2134==    at 0x401091: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2134==    by 0x400D13: read_input (in /graderhome/work/c4prj2_input/tester)
==2134==    by 0x401F62: main (test-input.c:69)
==2134==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2134== 
==2134== 
==2134== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2134==  Access not within mapped region at address 0x8
==2134==    at 0x401091: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2134==    by 0x400D13: read_input (in /graderhome/work/c4prj2_input/tester)
==2134==    by 0x401F62: main (test-input.c:69)
==2134==  If you believe this happened as a result of a stack
==2134==  overflow in your program's main thread (unlikely but
==2134==  possible), you can try to increase the size of the
==2134==  main thread stack using the --main-stacksize= flag.
==2134==  The main thread stack size used in this run was 8388608.
==2134== 
==2134== HEAP SUMMARY:
==2134==     in use at exit: 808 bytes in 12 blocks
==2134==   total heap usage: 19 allocs, 7 frees, 5,072 bytes allocated
==2134== 
==2134== LEAK SUMMARY:
==2134==    definitely lost: 0 bytes in 0 blocks
==2134==    indirectly lost: 0 bytes in 0 blocks
==2134==      possibly lost: 0 bytes in 0 blocks
==2134==    still reachable: 808 bytes in 12 blocks
==2134==         suppressed: 0 bytes in 0 blocks
==2134== Rerun with --leak-check=full to see details of leaked memory
==2134== 
==2134== For counts of detected and suppressed errors, rerun with: -v
==2134== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==2140== Memcheck, a memory error detector
==2140== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==2140== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==2140== Command: ./tester i1 i2
==2140== Parent PID: 2139
==2140== 
==2140== Invalid read of size 8
==2140==    at 0x401091: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2140==    by 0x400D13: read_input (in /graderhome/work/c4prj2_input/tester)
==2140==    by 0x401F62: main (test-input.c:69)
==2140==  Address 0x8 is not stack'd, malloc'd or (recently) free'd
==2140== 
==2140== 
==2140== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==2140==  Access not within mapped region at address 0x8
==2140==    at 0x401091: add_future_card (in /graderhome/work/c4prj2_input/tester)
==2140==    by 0x400D13: read_input (in /graderhome/work/c4prj2_input/tester)
==2140==    by 0x401F62: main (test-input.c:69)
==2140==  If you believe this happened as a result of a stack
==2140==  overflow in your program's main thread (unlikely but
==2140==  possible), you can try to increase the size of the
==2140==  main thread stack using the --main-stacksize= flag.
==2140==  The main thread stack size used in this run was 8388608.
==2140== 
==2140== HEAP SUMMARY:
==2140==     in use at exit: 760 bytes in 9 blocks
==2140==   total heap usage: 13 allocs, 4 frees, 4,904 bytes allocated
==2140== 
==2140== LEAK SUMMARY:
==2140==    definitely lost: 0 bytes in 0 blocks
==2140==    indirectly lost: 0 bytes in 0 blocks
==2140==      possibly lost: 0 bytes in 0 blocks
==2140==    still reachable: 760 bytes in 9 blocks
==2140==         suppressed: 0 bytes in 0 blocks
==2140== Rerun with --leak-check=full to see details of leaked memory
==2140== 
==2140== For counts of detected and suppressed errors, rerun with: -v
==2140== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)

Overall Grade: C
