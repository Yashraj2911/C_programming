Grading at Mon Aug  3 09:03:33 UTC 2020
Compiling cards.c -> cards.o
Compiling deck.c -> deck.o
Compiling input.c -> input.o
Compiling future.c -> future.o
Linking input.o, future.o deck.o, cards.o, and our tester
Testing with input file with 
 o 1 hand
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o No unknown/future cards
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o 1 unknown/future cards per hand
Your file matched the expected output
Test case passed
Testing with input file with 
 o Many hands
 o Many unknown/future cards per hand
Valgrind reported errors:
==896== Memcheck, a memory error detector
==896== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==896== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==896== Command: ./tester i1 i2
==896== Parent PID: 895
==896== 
==896== Use of uninitialised value of size 8
==896==    at 0x40126B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==896==    by 0x40202C: main (test-input.c:81)
==896== 
==896== Invalid write of size 4
==896==    at 0x40126B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==896==    by 0x40202C: main (test-input.c:81)
==896==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==896== 
==896== 
==896== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==896==  Access not within mapped region at address 0x0
==896==    at 0x40126B: future_cards_from_deck (in /graderhome/work/c4prj2_input/tester)
==896==    by 0x40202C: main (test-input.c:81)
==896==  If you believe this happened as a result of a stack
==896==  overflow in your program's main thread (unlikely but
==896==  possible), you can try to increase the size of the
==896==  main thread stack using the --main-stacksize= flag.
==896==  The main thread stack size used in this run was 8388608.
==896== 
==896== HEAP SUMMARY:
==896==     in use at exit: 2,672 bytes in 170 blocks
==896==   total heap usage: 323 allocs, 153 frees, 22,744 bytes allocated
==896== 
==896== LEAK SUMMARY:
==896==    definitely lost: 0 bytes in 0 blocks
==896==    indirectly lost: 0 bytes in 0 blocks
==896==      possibly lost: 0 bytes in 0 blocks
==896==    still reachable: 2,672 bytes in 170 blocks
==896==         suppressed: 0 bytes in 0 blocks
==896== Rerun with --leak-check=full to see details of leaked memory
==896== 
==896== For counts of detected and suppressed errors, rerun with: -v
==896== Use --track-origins=yes to see where uninitialised values come from
==896== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: B
